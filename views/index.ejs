<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCQ Quiz</title>
    <!DOCTYPE html>
<html lang="en">
    <style>
        * {
            box-sizing: border-box;
        }
        body {
            font-family: Arial, sans-serif;
            background: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .wrapper {
            display: flex;
            flex-direction: row;
            width: 90%;
            max-height: 90vh;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0,0,0,0.3);
            overflow: hidden;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
    
        .number-panel {
            background: #eee;
            width: 20%;
            padding: 10px;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
            grid-gap: 10px;
            justify-items: center;
            border-right: 2px solid rgba(0,0,0,0.1);
            box-shadow: inset -3px 0 5px rgba(0,0,0,0.05);
            overflow-y: auto;
            max-height: 90vh;
        }
    
        .number-panel button {
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 50%;
            background: #ccc;
            cursor: pointer;
            font-weight: bold;
            transition: 0.3s;
        }
    
        .number-panel button.attempted {
            background: #28a745;
            color: white;
        }
    
        .number-panel button.current {
            background: #007bff;
            color: white;
        }
    
        .quiz-area {
            flex: 1;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            overflow-y: auto;
            align-items: center;
            border-left: 2px solid rgba(0,0,0,0.1);
            box-shadow: inset 3px 0 5px rgba(0,0,0,0.05);
            text-align: center;
        }
    
        .quiz-area h1 {
            margin: 10px 0;
        }
    
        .quiz-area .stats {
            margin: 10px 0;
            font-size: 16px;
        }
    
        .quiz-area h3 {
            align-self: flex-start;
        }
    
        .quiz-area h3 a {
            text-decoration: none;
            color: #007bff;
            display: inline-block;
            margin-bottom: 10px;
        }
    
        .quiz-area h3 a:hover {
            text-decoration: underline;
        }
    
        .option {
            display: block;
            width: 100%;
            margin: 10px 0;
            padding: 15px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: 0.3s;
            text-align: center;
        }
    
        .option:hover {
            background: #0056b3;
        }
    
        .correct, .wrong, .selected {
            text-align: center;
        }
    
        .correct {
            background: green !important;
        }
    
        .wrong {
            background: red !important;
        }
    
        .selected {
            background: orange !important;
        }
    
        .btn-container {
            margin-top: 15px;
            text-align: center;
        }
    
        .btn {
            padding: 10px 15px;
            margin: 5px;
            font-size: 14px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
    
        .prev { background: #6c757d; color: white; }
        .prev:hover { background: orange; }
        .next { background: #28a745; color: white; }
        .next:hover { background: #218838; }
    
        .result-container {
            display: none;
            text-align: center;
        }
    
        @media (max-width: 768px) {
            .wrapper {
                flex-direction: column;
                width: 95%;
                max-height: none;
                height: auto;
            }
    
            .quiz-area {
                border-left: none;
                box-shadow: none;
                margin-bottom: 15px;
                width: 100%;
            }
    
            .number-panel {
                width: 100%;
                max-height: none;
                overflow-y: auto;
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
                grid-gap: 10px;
                justify-items: center;
                border: none;
                box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
                margin-bottom: 20px;
            }
    
            .number-panel button {
                width: 50px;
                height: 50px;
                border-radius: 50%;
            }
        }
    </style>
<div class="wrapper">
    <div class="quiz-area" id="quiz-container">
        <h3><a href="/Homepage">Back</a></h3>
        <h1>MCQ Quiz</h1>
        <p class="stats">
            Total: <span id="total-questions">0</span> |
            Attempted: <span id="attempted-questions">0</span> |
            Unattempted: <span id="unattempted-questions">0</span>
        </p>
        <h2 id="question">Loading...</h2>
        <button class="option" onclick="selectAnswer(0)">Option A</button>
        <button class="option" onclick="selectAnswer(1)">Option B</button>
        <button class="option" onclick="selectAnswer(2)">Option C</button>
        <button class="option" onclick="selectAnswer(3)">Option D</button>
        <p id="result"></p>
        <div class="btn-container">
            <button class="btn btn-success prev" id="prev-button" onclick="prevQuestion()">Previous</button>
            <button class="btn btn-success next" id="next-button" onclick="nextQuestion()">Next</button>

            <button class="btn" id="submit-button" onclick="submitExam()">Submit Exam</button>
        </div>
    </div>
    <div class="number-panel" id="number-panel">
    </div>
</div>

<div class="quiz-container result-container" id="result-container">
    <h1>Quiz Completed!</h1>
    <p>Total Questions: <span id="total"></span></p>
    <p>Attempted Questions: <span id="attempted"></span></p>
    <p>Correct Answers: <span id="correct"></span></p>
    <p>Score Percentage: <span id="percentage"></span>%</p>
    <h2 id="final-message"></h2>
</div>


<script>
    let questions = [];
    let currentQuestionIndex = 0;
    let attemptedQuestions = new Set();
    let selectedAnswers = {};
    let correctAnswers = 0;
    let totalQuestions = 0;
    let attemptedCount = 0;

    function loadQuestions() {
        fetch("/questions")
            .then(response => {
                if (!response.ok) throw new Error("Failed to fetch questions.");
                return response.json();
            })
            .then(data => {
                if (!data || data.length === 0) return showUnderConstruction();

                questions = data;
                totalQuestions = questions.length;
                document.getElementById("total-questions").innerText = totalQuestions;
                renderNumberPanel();
                updateStats();
                displayQuestion();
            })
            .catch(error => {
                console.error("❌ Error:", error);
                document.getElementById("question").innerText = "Error loading questions. Please try again.";
            });
    }

    function renderNumberPanel() {
        const panel = document.getElementById("number-panel");
        panel.innerHTML = "";
        questions.forEach((_, index) => {
            let btn = document.createElement("button");
            btn.innerText = index + 1;
            btn.onclick = () => {
                currentQuestionIndex = index;
                displayQuestion();
            };
            panel.appendChild(btn);
        });
        updateNumberPanel();
    }

    function updateNumberPanel() {
        const panelButtons = document.querySelectorAll("#number-panel button");
        panelButtons.forEach((btn, index) => {
            btn.classList.remove("attempted", "current");
            if (attemptedQuestions.has(index)) {
                btn.classList.add("attempted");
            }
            if (index === currentQuestionIndex) {
                btn.classList.add("current");
            }
        });
    }

    function displayQuestion() {
        if (currentQuestionIndex < 0) currentQuestionIndex = 0;
        if (currentQuestionIndex >= questions.length) return showResults();

        let q = questions[currentQuestionIndex];
        document.getElementById("question").innerText = q.question;

        let options = document.querySelectorAll(".option");
        let optionKeys = ["A", "B", "C", "D"];
        options.forEach((btn, index) => {
            let text = q.options[optionKeys[index]];
            if (text && text.trim()) {
                btn.innerText = text;
                btn.style.display = "block";
            } else {
                btn.style.display = "none";
            }
            btn.className = "option"; // Reset style
        });

        if (selectedAnswers[currentQuestionIndex] !== undefined) {
            let previousIndex = optionKeys.indexOf(selectedAnswers[currentQuestionIndex]);
            if (previousIndex !== -1 && options[previousIndex].style.display !== "none") {
                options[previousIndex].classList.add("selected");
            }
        }
        document.getElementById("result").innerText = "";
        updateNumberPanel();
        updateNavigationButtons();
    }

    function selectAnswer(selectedIndex) {
        let options = document.querySelectorAll(".option");
        let correctIndex = ["A", "B", "C", "D"].indexOf(questions[currentQuestionIndex].correct_option);

        options.forEach(btn => btn.className = "option");
        options[selectedIndex].classList.add("selected");

        selectedAnswers[currentQuestionIndex] = ["A", "B", "C", "D"][selectedIndex];
        attemptedQuestions.add(currentQuestionIndex);

        if (selectedIndex === correctIndex) {
            options[selectedIndex].classList.add("correct");
            document.getElementById("result").innerText = "✅ Correct!";
            correctAnswers++;
        } else {
            options[selectedIndex].classList.add("wrong");
            document.getElementById("result").innerText = "❌ Wrong! Try again.";
        }
        attemptedCount = attemptedQuestions.size;
        updateStats();
        updateNumberPanel();
    }

    function prevQuestion() {
        if (currentQuestionIndex > 0) {
            currentQuestionIndex--;
            displayQuestion();
        }
    }

    function nextQuestion() {
        if (currentQuestionIndex < questions.length - 1) {
            currentQuestionIndex++;
            displayQuestion();
        }
    }

    function updateStats() {
        document.getElementById('attempted-questions').innerText = attemptedCount;
        document.getElementById('unattempted-questions').innerText = totalQuestions - attemptedCount;

        // Enable/Disable submit button based on whether all questions are attempted
        const submitButton = document.getElementById('submit-button');
        if (attemptedCount === totalQuestions) {
            submitButton.disabled = false;
            submitButton.style.backgroundColor = "green"; // Enabled state (green)
        } else {
            submitButton.disabled = true;
            submitButton.style.backgroundColor = "#ccc"; // Disabled state (gray)
        }
    }

    function submitExam() {
        // Ensure that all questions are attempted before submitting
        if (attemptedCount !== totalQuestions) {
            alert('You must attempt all questions before submitting.');
            return;
        }

        // Proceed with submitting the exam (show results, etc.)
        showResults();
    }

    function showResults() {
        document.querySelector(".wrapper").style.display = "none";
        document.getElementById("result-container").style.display = "block";

        let total = totalQuestions;
        let attempted = attemptedQuestions.size;
        let percentage = ((correctAnswers / total) * 100).toFixed(2);

        document.getElementById("total").innerText = total;
        document.getElementById("attempted").innerText = attempted;
        document.getElementById("correct").innerText = correctAnswers;
        document.getElementById("percentage").innerText = percentage;

        document.getElementById("final-message").innerHTML = 
            percentage >= 50 
            ? `🎉 Congratulations! You Passed!<br><a href="/Homepage">Go to Homepage</a>`
            : `❌ Try Again!<br><a href="javascript:location.reload()">Try Again</a>`;
    }

    function showUnderConstruction() {
            document.getElementById("quiz-container").innerHTML = `
                <p class="error-message">🚧 Website is under construction. Please try again later.</p>
                <p class="Back to home">
                    <h3><a href="/Homepage">Back To Home</a></h3>
                </p>`;
        }

    function updateNavigationButtons() {
        const nextButton = document.getElementById("next-button");
        const prevButton = document.getElementById("prev-button");

        // Disable the Next button if it's the last question
        if (currentQuestionIndex === questions.length - 1) {
            nextButton.disabled = true;
            nextButton.style.backgroundColor = "#ccc"; // Disabled state (gray)
        } else {
            nextButton.disabled = false;
            nextButton.style.backgroundColor = "orange"; // Active state (orange)
        }

        // Enable the Previous button
        if (currentQuestionIndex > 0) {
            prevButton.disabled = false;
            prevButton.style.backgroundColor = "orange"; // Active state (orange)
        } else {
            prevButton.disabled = true;
            prevButton.style.backgroundColor = "#ccc"; // Disabled state (gray)
        }
    }

    loadQuestions();
</script>

</body>
</html>